<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://520cxy.github.io</id>
    <title>blog of the oier who is cool</title>
    <updated>2021-04-04T10:47:32.887Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://520cxy.github.io"/>
    <link rel="self" href="https://520cxy.github.io/atom.xml"/>
    <subtitle>共道人间惆怅事,不知今夕是何年 ——《周秦行纪》</subtitle>
    <logo>https://520cxy.github.io/images/avatar.png</logo>
    <icon>https://520cxy.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, blog of the oier who is cool</rights>
    <entry>
        <title type="html"><![CDATA[4.2 Solution]]></title>
        <id>https://520cxy.github.io/post/42-solution/</id>
        <link href="https://520cxy.github.io/post/42-solution/">
        </link>
        <updated>2021-04-02T02:04:33.000Z</updated>
        <content type="html"><![CDATA[<p><font size=5>T1 生成字符串</font><br>
在模拟的时候发现，如果他给出了<font color=red>连续的n个T<sub>1</sub>操作，就是翻转n%2次</font>，而串首串尾加字符，如果加了以后翻转，就等价于反着加，我们只需要记下每次操作填补的位置最后进行操作就行；</p>
<p><font size=5>T2 字符串查询</font><br>
据dalao们说是线段树和树状数组的维护，<s>我也看出来了</s>，但是我没<s>马</s>码；</p>
<p><font size=5>T3 下取整</font><br>
只要按照题目描述的进行操作之后，存下来的数和原数比较，反正我是做了一遍<font color=red>数学的逆运算</font>就切了唔</p>
<p><font size=5>T4 整除</font><br>
原题：<a href="https://atcoder.jp/contests/abc158/tasks/abc158_e">ABC158 E - Divisible Substring</a><br>
思维题，有一个很特别的性质吧，我也不知道叫什么，<font color=red>比如你的s[i]%p=k, s[j]%p=k,那么，<img src="https://520cxy.github.io/post-images/1617330955337.png" alt="" loading="lazy"></font><br>
<font color=green>所以在区间[i, j]中的数都能取，之后统计i~j中所有区间长度的区间个数累计加起来</font><br>
还有就是要注意p=2, 5的情况需要特判，由于这俩很好判断，<font color=red>只要末尾上的数可以整除那么前面一系列数都能取</font></p>
<p><font size=5>T5 机器人</font><br>
原题：<a href="https://atcoder.jp/contests/abc158/tasks/abc158_f">ABC158 F - Removing Robots</a><br>
首先这是一个DAG模型，一个机器的激活可以引起另一个的激活，这样我们根据某一机器人向能够引起爆炸的另外一个机器人连边便可以得到一张<font color=red>有向无环图</font><br>
事实上，有向无环图我们很难建立而且很难在上面完成答案的计算；<br>
因此题解中有一个很妙的思路：</p>
<blockquote>
<p>将DAG中多余的边去掉，使其变成一个树结构<br>
我们将<strong>多于的边去掉首先需要保证的是不会影响答案的计算</strong></p>
</blockquote>
<p>例如(A,B),(B,C),(A,C)这三条边中我们完全可以将(A,C)去掉，因为这两条路径是等价的。<br>
因此我们对于每一节点，只需要<font color=red>向离节点最左边位置的节点连边</font>即可。<br>
在程序实现上，我们可以使用优先队列/栈来维护：<br>
我们反向考虑，对于没有受到连边的节点放到一个容器使得容器的顶部位置最小。<br>
（为了能更容易的得到连边）<br>
若当前可以向容器的顶部连边，则连边并弹出顶部，直到不能连边为止。<br>
<font color=green>最优我们得到了一个森林结构，我们以每一个根为起点做树形DP。<br>
DP很很好写——xhf dalao</font><br>
我们设f[i]表示以i为根子树的选择方案。<br>
当i启动时，子树都需要启动，方案为1。<br>
当i不启动时，方案为子树的f值得积<br>
最后的答案是森林中每一个根的f值之积。<br>
<img src="https://520cxy.github.io/post-images/1617330304397.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Re:树链剖分的起源之战]]></title>
        <id>https://520cxy.github.io/post/reshu-lian-pou-fen-de-qi-yuan-zhi-zhan/</id>
        <link href="https://520cxy.github.io/post/reshu-lian-pou-fen-de-qi-yuan-zhi-zhan/">
        </link>
        <updated>2021-03-31T12:26:49.000Z</updated>
        <content type="html"><![CDATA[<p><font size=6><strong>哲学</strong>三问</font><br>
<font size=4 >一.树链剖分是啥？</font><br>
<font color=red>树链，就是树上的路径。剖分，就是把路径分类为重链和轻链。</font><br>
<font size=4 >二.树链剖分用来干啥？</font></p>
<blockquote>
<p>有的人说：“我会树上倍增，我怕谁？”，没错，你怕的就是树链剖分。<br>
意思是：树上倍增能做的，树链剖分都能做；树链剖分能做的，树上倍增不一定能做<s>就像那啥，树状数组能做的线段树一定能做，线段树能做的，树状数组不一定能做</s>。树上倍增虽然能求树上区间极值或和，但一旦有树上边或点权值修改的操作，您就爆dan了这时我们需要一个新的算法来补上我们的树上倍增操作的漏洞，没错，就是<strong>树链剖分</strong>！没错！你学了它<s>一定</s>不会后悔！!</p>
</blockquote>
<p><a href="https://edge-bird.github.io/2021/01/30/Binary%20Index%20Tree/">树状数组</a> &lt;--- 不会点这里，<s>营销大鸟</s>的blog<br>
<font color=red>在一棵树上进行路径的修改、求极值、求和”</font>乍一看只要线段树就能轻松解决，实际上，仅凭线段树是不能搞定它的。我们需要用到一种<s>貌似</s>高级的复杂算法—<strong>树链剖分</strong></p>
<p><font size=4 >三.树链剖分咋用？</font><br>
如果要使用树链剖分，概念滴你们滴需要懂滴</p>
<blockquote>
<p>对于一个节点，在它的所有儿子中，size（子树大小）最大的一个就是<strong>重儿子</strong>，其余的都是<strong>轻儿子</strong>。重儿子所在的树链叫做<strong>重链</strong>，其余叫做<strong>轻链</strong>。</p>
</blockquote>
<p><font color=blue>e.g:</font><img src="https://520cxy.github.io/post-images/1617195153603.png" alt="" loading="lazy"><br>
<s>头上有绿</s>被涂上颜色的是一条重链，这个栗子里有五条重链，分别为：<br>
1---2---6---9<br>
5<br>
3<br>
4---7<br>
8</p>
<p>那么，我们需要维护什么？</p>
<blockquote>
<p>tree数组，表示整棵树上的信息<br>
tree[i].depth表示i的的深度<br>
tree[i].top表示i所在的重链顶端的结点<br>
tree[i].father表示i点的父亲<br>
tree[i].key表示i点的权值<br>
tree[i].To_tree表示节点i在线段树中的位置<br>
tree[i].size表示以i为根的子树大小<br>
tree[i].heavy_son表示i节点的重儿子<br>
To_num[i]表示线段树中的i号节点对应的是原树中的位置<br>
//鉴于我是个蒟蒻，这里之讲用数据结构线段树维护</p>
</blockquote>
<p><font color=green size=4><strong>CODE:</strong></font><br>
<img src="https://520cxy.github.io/post-images/1617195521550.png" alt="" loading="lazy"></p>
<p><font color=green size=4><strong>人工栈板CODE:</strong></font><br>
<img src="https://520cxy.github.io/post-images/1617195745240.png" alt="" loading="lazy"></p>
<p><font size=4 >其他运用啦</font><br>
<strong>LCA查询</strong><br>
比线段树牛bi多了，<s>代码也难的一批</s><br>
<strong>STEPS：</strong></p>
<blockquote>
<p>1.我们查看当前tree[x].top是否与tree[y].top相等<br>
2.如果不相等，那么就将深度较大的(假设为x)跳到当前重链顶端的父亲。<br>
3.一直这样迭代，直到它们top相等为止。<br>
4.如果它们的top相等，有两种情况：<br>
①x=y<br>
②y是x的祖先（或x是y的祖先）<br>
<font color=red>那么LCA就是深度较小的那一个！</font></p>
</blockquote>
<p><font color=green size=4><strong>CODE:</strong></font><br>
<img src="https://520cxy.github.io/post-images/1617196218239.png" alt="" loading="lazy"></p>
<p><strong>区间极值或和查询</strong><br>
在求LCA可以顺带操作一下，具体还是康代码吧::<br>
<font color=green size=4><strong>CODE:</strong></font><br>
<img src="https://520cxy.github.io/post-images/1617196594474.png" alt="" loading="lazy"></p>
<p><font size=4 ><strong>复杂度证明</strong></font><br>
<font color=red>------摘自OI Wiki, 因为我不会<font><br>
<img src="https://520cxy.github.io/post-images/1617196730978.png" alt="" loading="lazy"></p>
<p><font size=4 ><strong>该你大展身手了！！！</strong></font><br>
<a href="https://www.luogu.com.cn/problem/P3258">luogu P3258[JLOI2014]松鼠的新家</a><br>
<a href="https://www.luogu.com.cn/problem/P3178">luogu P3178[HAOI2015]树上操作</a><br>
<a href="https://www.luogu.com.cn/problem/P3384">luogu P3384【模板】树链剖分</a><br>
<a href="https://www.luogu.com.cn/problem/P2486">P2486 [SDOI2011]染色</a><br>
<a href="https://www.luogu.com.cn/problem/P3313">P3313 [SDOI2014]旅行</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于Me]]></title>
        <id>https://520cxy.github.io/post/about/</id>
        <link href="https://520cxy.github.io/post/about/">
        </link>
        <updated>2019-01-25T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>欢迎来到我的小站呀，很高兴遇见你！</p>
</blockquote>
<h2 id="欢迎和我交朋友">欢迎和我交朋友！</h2>
<h2 id="博猪是zj的一枚蒟蒻~~">👨‍💻 博猪是ZJ的一枚蒟蒻~~</h2>
<h2 id="喜欢篮球篮球plmm">喜欢篮球，篮球，<s>plmm</s></h2>
<h2 id="你谷"><a href="https://www.luogu.com.cn/user/228866">你谷</a> qq 号：2949287507</h2>
]]></content>
    </entry>
</feed>